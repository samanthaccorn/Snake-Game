Samantha Corn
Final Project
report.txt
	I wrote a program that runs the classic game snake. I wrote a class that keeps track of of where the snake and the apple are in an array. The main program takes care of all the drawing based off of this class' 
array.
	The class is called Board. There is a reset function that clears the board, as the game can be played more than once. The class has private variables that keep track of the tail and head x- and y- positions. This allows the class to reset the tail to nothing and set the next piece to where the head is in the user-specified direction. The game starts with the snake one square long, so the tail and head x- and y-positions are the same. The snake starts in the middle of the board. There is a move function that takes the user input and changes the direction accordingly. The move function then calls the placeSnake function. The placeSnake function takes care of moving the snake around the board. There is a private char array in the Board function that shows where the snake is and the direction of the next consecutive part of the snake is. This is necessary because it is possible for the tail of the snake to be touching more than just the next piece of snake. The placeSnake function updates this array accordingly. It then updates the head and tail x- and y-values. Lastly, it checks to make sure the game hasn't ended by the snake crashing into a wall or itself. In addition, if the snake has eaten the apple, it places another one. The placeApple function picks random spots on the board until it finds one that the snake isn't occupying.
	The main program final.cpp creates an object of the Board class. It runs through the board array in the Board class. It erases the tail when it draws the head in the next place. I tried writing it where it redrew the snake every iteration, but that made the program run too slowly. 
	From a user perspective, when the program is launched, it to a menu. The user presses 'p' to play or 'q' to quit. When the game ends, the screen is cleared and the user is prompted to hit the 'c' key to continue. This brings the program back to the original menu.

